MCUFIRMWAREBASE := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))

APPDIR := $(CURDIR)
EXTERNAL_BOARD_DIRS ?= $(MCUFIRMWAREBASE)/boards/
LAST_MAKEFILEDIR = $(realpath $(dir $(lastword $(MAKEFILE_LIST))))
RIOTBASE ?= $(MCUFIRMWAREBASE)/../RIOT/
BUILD_DIR = $(BINDIR)/build
PKGDIRBASE = $(BUILD_DIR)/pkg
RIOTPKG ?= $(MCUFIRMWAREBASE)/pkg

# Apply RIOT-OS patches as soon as possible
include $(MCUFIRMWAREBASE)/makefiles/riot-patches.mk.inc

# Function to check version
include $(MCUFIRMWAREBASE)/makefiles/version_check.mk.inc

# Create a symbolic for each package in RIOT
pkgs := $(foreach dir,$(wildcard $(RIOTBASE)/pkg/*/Makefile),$(subst Makefile,, $(dir)))
$(foreach pkg,$(pkgs), $(shell ln -sf $(pkg) $(RIOTPKG)/$(notdir $(pkg))))

# Development options
QUIET ?= 1
DEVELHELP ?= 1
THREAD_NAMES = 1

define remote-flash-recipe
	scp $(BINFILE) $(REMOTE_USER)@$(REMOTE_TARGET):/tmp/fw.bin
	$(GDB) -nx -batch -ex "target extended-remote $(REMOTE_TARGET):3333" -ex "monitor reset halt" -ex "monitor flash write_image erase /tmp/fw.bin 0x08000000" -ex "monitor reset run"
endef

ifneq ($(REMOTE_TARGET),)
	TERMPROG=ssh $(REMOTE_TARGET) picocom
	TERMFLAGS=-q --imap lfcrlf -b $(BAUD) $(PORT)
	flash-recipe = $(remote-flash-recipe)
endif

MCUFW_MODULE_DIRS = " \
					motion_control \
					motion_control/controllers \
					motion_control/engines \
					motion_control/filters \
					motion_control/metas \
					drivers \
					lib \
					planners \
					platforms \
					sys \
					"

# All directories starting with 'shell_' are shell modules.
# List them to add their parent directory to EXTERNAL_MODULE_DIRS.
shell_module_dirs = $(wildcard $(MCUFW_MODULE_DIRS:%=$(MCUFIRMWAREBASE)/%/*/shell_*/.))
EXTERNAL_MODULE_DIRS += $(MCUFW_MODULE_DIRS:%=$(MCUFIRMWAREBASE)/%/) $(shell_module_dirs:%=%/..)

# Export mcu-firmware global variables
include $(MCUFIRMWAREBASE)/makefiles/global_vars.mk.inc

# Global project requirements
include $(MCUFIRMWAREBASE)/Makefile.dep

# RIOT Makefile include
include $(RIOTBASE)/Makefile.include

ifneq ($(wildcard $(APPDIR)/include/.*),)
	INCLUDES += -I$(APPDIR)/include/

	ifneq ($(CPU),native)
		ifneq ($(wildcard $(APPDIR)/include/real/.*),)
			INCLUDES += -I$(APPDIR)/include/real/
		endif
	else
		ifneq ($(wildcard $(APPDIR)/include/simulation/.*),)
			INCLUDES += -I$(APPDIR)/include/simulation/
		endif
	endif
endif

# As RIOT Makefile.include is included, RAMSIZE can be computed
ifneq ($(CPU),native)
	.DEFAULT_GOAL := world
endif

# mallinfo2 is only available on native architecture with glibc >=2.33, making mallinfo deprecated
mallinfo := mallinfo
ifeq ($(CPU),native)
	GLIBC_VERSION := $(shell ldd --version | head -1 | awk '{print $$NF}')
	ifeq ($(call version_ge,$(GLIBC_VERSION),2.33),TRUE)
		mallinfo := mallinfo2
	endif
endif
ifeq ($(mallinfo), mallinfo2)
	CFLAGS += -D"MALLINFO=struct mallinfo2"
	CFLAGS += -D"MALLINFO_FUNC()=mallinfo2()"
else
	CFLAGS += -D"MALLINFO=struct mallinfo"
	CFLAGS += -D"MALLINFO_FUNC()=mallinfo()"
endif

# Use C++14 by default
tmp_cxxexflags := $(CXXEXFLAGS)
CXXEXFLAGS = $(filter-out -std=%, $(tmp_cxxexflags))
CXXEXFLAGS += -std=c++17
CXXEXFLAGS += -Wno-pedantic
CXXEXFLAGS += -Wno-cast-align

LINKFLAGS:=$(filter-out -nostartfiles,$(LINKFLAGS))

# Using libstdcpp requires a larger ISR stack by default
ifeq (,$(findstring -DISR_STACKSIZE=,$(CFLAGS)))
	CFLAGS += -DISR_STACKSIZE=2048
endif

all: $(patchstamps)
.PHONY: world
world: all
	$(Q)$(MCUFIRMWAREBASE)/tools/fwsize.sh $(SIZE) $(ELFFILE) $(FLASHSIZE) $(RAM_LEN)
