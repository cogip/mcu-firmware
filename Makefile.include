MCUFIRMWAREBASE := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))

APPDIR := $(CURDIR)
EXTERNAL_BOARD_DIRS ?= $(MCUFIRMWAREBASE)/boards/
LAST_MAKEFILEDIR = $(realpath $(dir $(lastword $(MAKEFILE_LIST))))
RIOTBASE ?= $(MCUFIRMWAREBASE)/../RIOT/
BUILD_DIR = $(BINDIR)/build
PKGDIRBASE = $(BUILD_DIR)/pkg
RIOTPKG ?= $(MCUFIRMWAREBASE)/pkg

# Create a symbolic for each package in RIOT
pkgs := $(foreach dir,$(wildcard $(RIOTBASE)/pkg/*/Makefile),$(subst Makefile,, $(dir)))
$(foreach pkg,$(pkgs), $(shell ln -sf $(pkg) $(RIOTPKG)/$(notdir $(pkg))))

# Development options
QUIET ?= 1
DEVELHELP ?= 1

# Required features
FEATURES_REQUIRED += cpp

# Required modules
USEMODULE += cpp11-compat

# Required packages
USEPKG += etl

define remote-flash-recipe
	scp $(BINFILE) $(REMOTE_USER)@$(REMOTE_TARGET):/tmp/fw.bin
	$(GDB) -nx -batch -ex "target extended-remote $(REMOTE_TARGET):3333" -ex "monitor reset halt" -ex "monitor flash write_image erase /tmp/fw.bin 0x08000000" -ex "monitor reset run"
endef

ifneq ($(REMOTE_TARGET),)
	TERMPROG=ssh $(REMOTE_TARGET) picocom
	TERMFLAGS=-q --imap lfcrlf -b $(BAUD) $(PORT)
	flash-recipe = $(remote-flash-recipe)
endif

MCUFW_MODULE_DIRS = " \
					controllers \
					drivers \
					lib \
					planners \
					platforms \
					sys \
					"

# All directories starting with 'shell_' are shell modules.
# List them to add their parent directory to EXTERNAL_MODULE_DIRS.
shell_module_dirs = $(wildcard $(MCUFW_MODULE_DIRS:%=$(MCUFIRMWAREBASE)/%/*/shell_*/.))
EXTERNAL_MODULE_DIRS += $(MCUFW_MODULE_DIRS:%=$(MCUFIRMWAREBASE)/%/) $(shell_module_dirs:%=%/..)

# Export mcu-firmware global variables
include $(MCUFIRMWAREBASE)/makefiles/global_vars.mk.inc

# RIOT Makefile include
include $(RIOTBASE)/Makefile.include

ifneq ($(wildcard $(APPDIR)/include/.*),)
	INCLUDES += -I$(APPDIR)/include/

	ifneq ($(CPU),native)
		ifneq ($(wildcard $(APPDIR)/include/real/.*),)
			INCLUDES += -I$(APPDIR)/include/real/
		endif
	else
		ifneq ($(wildcard $(APPDIR)/include/simulation/.*),)
			INCLUDES += -I$(APPDIR)/include/simulation/
		endif
	endif
endif

# As RIOT Makefile.include is included, RAMSIZE can be computed
ifneq ($(CPU),native)
	.DEFAULT_GOAL := world
endif

# Use C++14 by default
tmp_cxxexflags := $(CXXEXFLAGS)
CXXEXFLAGS = $(filter-out -std=%, $(tmp_cxxexflags))
CXXEXFLAGS += -std=c++17
CXXEXFLAGS += -Wno-pedantic
CXXEXFLAGS += -Wno-cast-align

.PHONY: world
world: all
	$(Q)$(MCUFIRMWAREBASE)/tools/fwsize.sh $(SIZE) $(ELFFILE) $(FLASHSIZE) $(RAM_LEN)
